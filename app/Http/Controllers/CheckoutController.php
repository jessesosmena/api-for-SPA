<?php

namespace App\Http\Controllers;

use Mail;
use Auth;
use App\Address;
use App\Mail\OrderShipped;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
 
class CheckoutController extends Controller
{
    public function storePayment(Request $request) 
    {
        // Set your secret key: remember to change this to your live secret key in production
        // See your keys here: https://dashboard.stripe.com/account/apikeys
        $stripe = \Stripe\Stripe::setApiKey("sk_test_aHrY4io3pPu2mMENjebITZVM");

        // Token is created using Stripe.js or Checkout!
        // Get the payment token submitted by the form:
        //$token = $_POST['stripeToken']; // get token from form generated by stripe
        $token = $request->input('token');
        $name = $request->input('name');
        $email = $request->input('email');
        $quantity = $request->input('quantity');
        $total = $request->input('total');

        $customer = \Stripe\Customer::create(array(
          "email" => $email,
        ));
        
        $customer->sources->create(array("card" => $token));

        if($customer->id){
          // Charge the user's card:
          $charge = \Stripe\Charge::create(array(
            "amount" => $total * 100, // Amount in cents
            "currency" => "EUR",
            "description" => "Example charge",
            "receipt_email" => $email,
            "customer" => $customer->id,
          ));
        }

        $content = [
            'name' => $name,
            'quantity' => $quantity,
            'amount'=> $total
        ];

        Mail::to($email)->send(new OrderShipped($content));
      
        return response()->json('Order has been shipped.'); 
    }
}
